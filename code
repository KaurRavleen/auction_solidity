pragma solidity >= 0.5.0 <0.9.0;
contract AuctionCreator
{
    Auction[] public auctions;
    function createAuction() public
    {
        Auction newAuction= new Auction(msg.sender);
        auctions.push(newAuction);
    }
}

contract Auction
{
    uint public startBlock;
    uint public endBlock;
    string public ipfsHash;
    address payable public owner;
    uint public highestBindingBid;

    enum State{Started,Running,Ended,Cancelled}
    State public auctionState;

    address payable public highestBidder;
    mapping(address => uint) public bids;
    uint bidIncrement;

    bool public ownerFinalise= false;

    constructor()
    {
        owner=payable(msg.sender);
        auctionState= State.Running;
        startBlock= block.number;
        endBlock=startBlock+3;
        ipfsHash="";
        bidIncrement= 1 ether;

    }
    modifier notOwner()
    {
        require(msg.sender!=owner);
        _;
    }
    modifier onlyOwner()
    {
        require(msg.sender== owner);
        _;
    }
    modifier afterStart()
    {
        require(block.number>=startBlock);
        _;
    }
    modifier beforeEnd()
    {
        require(block.number<=endBlock);
        _;
    }

    function min(uint a, uint b) pure internal returns(uint)
    {
        if(a<=b)
        {
            return a;
        }
        else{
            return b;
        }
    }
    function cancelAuction() public beforeEnd onlyOwner
    {
        auctionState= State.Cancelled;
    }
    function placeBid() public payable notOwner afterStart beforeEnd returns(bool)
    {
        
        require(auctionState== State.Running);
        uint currentBid = bids[msg.sender] + msg.value;
        require (currentBid> highestBindingBid);
        bids[msg.sender]=currentBid;
        if(currentBid <= bids[highestBidder])
        {
            highestBindingBid= min(currentBid + bidIncrement , bids[highestBindingBid]);

        }
        else
        {
            highestBindingBid= min(currentBid, bids[highestBindingBid]+ bidIncrement);
            highestBindingBid= payable(msg.sender);

        }
        return true;
    }

    function finaliseAuction() public
    {
        require(auctionState== State.Cancelled  || block.number > endBlock);
        require(msg.sender ==  owner || bids[msg.sender]>0);
        address payable recipient;
        uint value;
        
        if (auctionState==State.Cancelled)
        {
            recipient= payable(msg.sender);
            value= bids[msg.sender];
        }
        else
        {
            if(msg.sender == owner && ownerFinalise == false)
            {
                recipient=owner;
                value= highestBindingBid;
                ownerFinalise= true;
            }
            else
            {
                if(msg.sender== highestBidder)
                {
                    recipient= highestBidder;
                    value = bids[highestBidder] - highestBindingBid;
                }
                else
                {
                    recipient= payable(msg.sender);
                    value= bids[msg.sender];
                }
            }
            
        }
        bids[recipient]=0;
        recipient.transfer(value);
        
    }

}
